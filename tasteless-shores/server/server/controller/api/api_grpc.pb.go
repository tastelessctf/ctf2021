// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Controller_EventsClient, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Player, error)
	Inventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddMarker(ctx context.Context, in *AddMarkerRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ChangeArea(ctx context.Context, in *ChangeAreaRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ChangeChar(ctx context.Context, in *ChangeCharRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddShard(ctx context.Context, in *AddShardRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RmShard(ctx context.Context, in *RmShardRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	MoveShard(ctx context.Context, in *MoveShardRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	MoveUser(ctx context.Context, in *MoveUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Controller_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], "/Controller/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type controllerEventsClient struct {
	grpc.ClientStream
}

func (x *controllerEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/Controller/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Inventory(ctx context.Context, in *InventoryRequest, opts ...grpc.CallOption) (*InventoryResponse, error) {
	out := new(InventoryResponse)
	err := c.cc.Invoke(ctx, "/Controller/Inventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddMarker(ctx context.Context, in *AddMarkerRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/AddMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ChangeArea(ctx context.Context, in *ChangeAreaRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/ChangeArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ChangeChar(ctx context.Context, in *ChangeCharRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/ChangeChar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddShard(ctx context.Context, in *AddShardRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/AddShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RmShard(ctx context.Context, in *RmShardRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/RmShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) MoveShard(ctx context.Context, in *MoveShardRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/MoveShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) MoveUser(ctx context.Context, in *MoveUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Controller/MoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	Events(*EventsRequest, Controller_EventsServer) error
	Auth(context.Context, *AuthRequest) (*Player, error)
	Inventory(context.Context, *InventoryRequest) (*InventoryResponse, error)
	AddItem(context.Context, *AddItemRequest) (*EmptyResponse, error)
	AddMarker(context.Context, *AddMarkerRequest) (*EmptyResponse, error)
	ChangeArea(context.Context, *ChangeAreaRequest) (*EmptyResponse, error)
	ChangeChar(context.Context, *ChangeCharRequest) (*EmptyResponse, error)
	AddShard(context.Context, *AddShardRequest) (*EmptyResponse, error)
	RmShard(context.Context, *RmShardRequest) (*EmptyResponse, error)
	MoveShard(context.Context, *MoveShardRequest) (*EmptyResponse, error)
	MoveUser(context.Context, *MoveUserRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) Events(*EventsRequest, Controller_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedControllerServer) Auth(context.Context, *AuthRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedControllerServer) Inventory(context.Context, *InventoryRequest) (*InventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inventory not implemented")
}
func (UnimplementedControllerServer) AddItem(context.Context, *AddItemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedControllerServer) AddMarker(context.Context, *AddMarkerRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMarker not implemented")
}
func (UnimplementedControllerServer) ChangeArea(context.Context, *ChangeAreaRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeArea not implemented")
}
func (UnimplementedControllerServer) ChangeChar(context.Context, *ChangeCharRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeChar not implemented")
}
func (UnimplementedControllerServer) AddShard(context.Context, *AddShardRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShard not implemented")
}
func (UnimplementedControllerServer) RmShard(context.Context, *RmShardRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmShard not implemented")
}
func (UnimplementedControllerServer) MoveShard(context.Context, *MoveShardRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveShard not implemented")
}
func (UnimplementedControllerServer) MoveUser(context.Context, *MoveUserRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUser not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Events(m, &controllerEventsServer{stream})
}

type Controller_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type controllerEventsServer struct {
	grpc.ServerStream
}

func (x *controllerEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Inventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Inventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/Inventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Inventory(ctx, req.(*InventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/AddMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddMarker(ctx, req.(*AddMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ChangeArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ChangeArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/ChangeArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ChangeArea(ctx, req.(*ChangeAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ChangeChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ChangeChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/ChangeChar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ChangeChar(ctx, req.(*ChangeCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/AddShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddShard(ctx, req.(*AddShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RmShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RmShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/RmShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RmShard(ctx, req.(*RmShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_MoveShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).MoveShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/MoveShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).MoveShard(ctx, req.(*MoveShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_MoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).MoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/MoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).MoveUser(ctx, req.(*MoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Controller_Auth_Handler,
		},
		{
			MethodName: "Inventory",
			Handler:    _Controller_Inventory_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _Controller_AddItem_Handler,
		},
		{
			MethodName: "AddMarker",
			Handler:    _Controller_AddMarker_Handler,
		},
		{
			MethodName: "ChangeArea",
			Handler:    _Controller_ChangeArea_Handler,
		},
		{
			MethodName: "ChangeChar",
			Handler:    _Controller_ChangeChar_Handler,
		},
		{
			MethodName: "AddShard",
			Handler:    _Controller_AddShard_Handler,
		},
		{
			MethodName: "RmShard",
			Handler:    _Controller_RmShard_Handler,
		},
		{
			MethodName: "MoveShard",
			Handler:    _Controller_MoveShard_Handler,
		},
		{
			MethodName: "MoveUser",
			Handler:    _Controller_MoveUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Controller_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	Users(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminUsersResponse, error)
	Events(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Admin_EventsClient, error)
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Users(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminUsersResponse, error) {
	out := new(AdminUsersResponse)
	err := c.cc.Invoke(ctx, "/Admin/Users", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Events(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Admin_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Admin_ServiceDesc.Streams[0], "/Admin/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_EventsClient interface {
	Recv() (*AdminEvent, error)
	grpc.ClientStream
}

type adminEventsClient struct {
	grpc.ClientStream
}

func (x *adminEventsClient) Recv() (*AdminEvent, error) {
	m := new(AdminEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Admin/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	Users(context.Context, *EmptyRequest) (*AdminUsersResponse, error)
	Events(*EmptyRequest, Admin_EventsServer) error
	Command(context.Context, *CommandRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Users(context.Context, *EmptyRequest) (*AdminUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Users not implemented")
}
func (UnimplementedAdminServer) Events(*EmptyRequest, Admin_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedAdminServer) Command(context.Context, *CommandRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/Users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Users(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).Events(m, &adminEventsServer{stream})
}

type Admin_EventsServer interface {
	Send(*AdminEvent) error
	grpc.ServerStream
}

type adminEventsServer struct {
	grpc.ServerStream
}

func (x *adminEventsServer) Send(m *AdminEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Admin_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Users",
			Handler:    _Admin_Users_Handler,
		},
		{
			MethodName: "Command",
			Handler:    _Admin_Command_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Admin_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
