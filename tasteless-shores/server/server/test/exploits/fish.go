package main

import (
	"encoding/binary"
	"fmt"
	"log"
	"net"
	"strings"
	"time"
)

func fish() {
	c, err := net.Dial("tcp", "localhost:31337")
	if err != nil {
		log.Fatal(err)
	}

	fmt.Fprintf(c, "pirates!\x00\x03ccm\x00")
	fmt.Fprintf(c, "\x22\x08")
	log.Println("joined")

	go func() {
		var buf = make([]byte, 100)
		for {
			n, err := c.Read(buf)
			s := string(buf[:n])
			if strings.Contains(s, "tstlss") {
				log.Println("read: ", s)
			}
			if err != nil {
				log.Println(err)
				c.Close()
				return
			}
		}
	}()

	time.Sleep(100 * time.Millisecond)

	binary.Write(c, binary.LittleEndian, uint8(0x96))

	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(-198))
	binary.Write(c, binary.LittleEndian, float64(4.8))
	binary.Write(c, binary.LittleEndian, float64(570))
	binary.Write(c, binary.LittleEndian, float64(1))

	time.Sleep(5000 * time.Millisecond)

	log.Println("trying")

	binary.Write(c, binary.LittleEndian, uint8(0x76))
	fmt.Fprintf(c, "\x09FLAG_BOAT")

	binary.Write(c, binary.LittleEndian, uint8(0x76))
	fmt.Fprintf(c, "\x09FLAG_BOAT")

	binary.Write(c, binary.LittleEndian, uint8(0x76))
	fmt.Fprintf(c, "\x09FLAG_BOAT")

	time.Sleep(30 * time.Second)
}
