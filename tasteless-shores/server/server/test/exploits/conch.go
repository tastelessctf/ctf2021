package main

import (
	"encoding/binary"
	"fmt"
	"log"
	"math"
	"net"
	"time"

	"ts/server/ts"
)

func conch() {
	c, err := net.Dial("tcp", "localhost:31337")
	if err != nil {
		log.Fatal(err)
	}

	fmt.Fprintf(c, "pirates!\x00\x03ccm\x00")
	fmt.Fprintf(c, "\x22\x08")
	log.Println("joined")

	msgs := make(chan ts.ServerMessageConch, 10)

	go func() {
		for {
			msg, err := ts.ReadServerMessage(c)
			if err != nil {
				panic(err)
			}
			switch msg := msg.(type) {
			case ts.ServerMessageFlag:
				log.Println("Got flag", msg)
			case ts.ServerMessageConch:
				msgs <- msg
			}
			// log.Printf("%#v", msg)
		}
	}()

	time.Sleep(100 * time.Millisecond)

	binary.Write(c, binary.LittleEndian, uint8(0x91)) // equip
	binary.Write(c, binary.LittleEndian, uint8(7))

	time.Sleep(100 * time.Millisecond)

	// pos, conch

	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(0))
	binary.Write(c, binary.LittleEndian, float64(1))
	binary.Write(c, binary.LittleEndian, float64(1))
	binary.Write(c, binary.LittleEndian, float64(1))
	time.Sleep(100 * time.Millisecond)
	binary.Write(c, binary.LittleEndian, uint8(0xfe)) // attack
	binary.Write(c, binary.LittleEndian, uint64(0))
	time.Sleep(2 * time.Second)

	conch := <-msgs
	log.Println(conch.Distance)
	d1 := conch.Distance

	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(0))
	binary.Write(c, binary.LittleEndian, float64(2))
	binary.Write(c, binary.LittleEndian, float64(2))
	binary.Write(c, binary.LittleEndian, float64(1))
	time.Sleep(100 * time.Millisecond)
	binary.Write(c, binary.LittleEndian, uint8(0xfe)) // attack
	binary.Write(c, binary.LittleEndian, uint64(0))
	time.Sleep(2 * time.Second)

	conch = <-msgs
	log.Println(conch.Distance)
	d2 := conch.Distance

	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(0))
	binary.Write(c, binary.LittleEndian, float64(4))
	binary.Write(c, binary.LittleEndian, float64(5))
	binary.Write(c, binary.LittleEndian, float64(1))
	time.Sleep(100 * time.Millisecond)
	binary.Write(c, binary.LittleEndian, uint8(0xfe)) // attack
	binary.Write(c, binary.LittleEndian, uint64(0))
	time.Sleep(2 * time.Second)

	conch = <-msgs
	log.Println(conch.Distance)
	d3 := conch.Distance

	i1, i2, i3, j1, j2, j3 := 1.0, 2.0, 4.0, 1.0, 2.0, 5.0

	x := ((((math.Pow(d1, 2)-math.Pow(d2, 2))+(math.Pow(i2, 2)-math.Pow(i1, 2))+(math.Pow(j2, 2)-math.Pow(j1, 2)))*(2*j3-2*j2) - ((math.Pow(d2, 2)-math.Pow(d3, 2))+(math.Pow(i3, 2)-math.Pow(i2, 2))+(math.Pow(j3, 2)-math.Pow(j2, 2)))*(2*j2-2*j1)) / ((2*i2-2*i3)*(2*j2-2*j1) - (2*i1-2*i2)*(2*j3-2*j2)))
	y := ((math.Pow(d1, 2) - math.Pow(d2, 2)) + (math.Pow(i2, 2) - math.Pow(i1, 2)) + (math.Pow(j2, 2) - math.Pow(j1, 2)) + x*(2*i1-2*i2)) / (2*j2 - 2*j1)

	log.Println(x, y)

	// pos, conch

	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(5))
	binary.Write(c, binary.LittleEndian, float64(0))
	binary.Write(c, binary.LittleEndian, float64(1))
	binary.Write(c, binary.LittleEndian, float64(1))
	time.Sleep(100 * time.Millisecond)
	binary.Write(c, binary.LittleEndian, uint8(0xfe)) // attack
	binary.Write(c, binary.LittleEndian, uint64(0))
	time.Sleep(2 * time.Second)

	conch = <-msgs
	log.Println(conch.Distance)
	d1 = conch.Distance

	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(4))
	binary.Write(c, binary.LittleEndian, float64(0))
	binary.Write(c, binary.LittleEndian, float64(2))
	binary.Write(c, binary.LittleEndian, float64(1))
	time.Sleep(100 * time.Millisecond)
	binary.Write(c, binary.LittleEndian, uint8(0xfe)) // attack
	binary.Write(c, binary.LittleEndian, uint64(0))
	time.Sleep(2 * time.Second)

	conch = <-msgs
	log.Println(conch.Distance)
	d2 = conch.Distance

	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(3))
	binary.Write(c, binary.LittleEndian, float64(0))
	binary.Write(c, binary.LittleEndian, float64(5))
	binary.Write(c, binary.LittleEndian, float64(1))
	time.Sleep(100 * time.Millisecond)
	binary.Write(c, binary.LittleEndian, uint8(0xfe)) // attack
	binary.Write(c, binary.LittleEndian, uint64(0))
	time.Sleep(2 * time.Second)

	conch = <-msgs
	log.Println(conch.Distance)
	d3 = conch.Distance

	i1, i2, i3, j1, j2, j3 = 5.0, 4.0, 3.0, 1.0, 2.0, 5.0

	x1 := ((((math.Pow(d1, 2)-math.Pow(d2, 2))+(math.Pow(i2, 2)-math.Pow(i1, 2))+(math.Pow(j2, 2)-math.Pow(j1, 2)))*(2*j3-2*j2) - ((math.Pow(d2, 2)-math.Pow(d3, 2))+(math.Pow(i3, 2)-math.Pow(i2, 2))+(math.Pow(j3, 2)-math.Pow(j2, 2)))*(2*j2-2*j1)) / ((2*i2-2*i3)*(2*j2-2*j1) - (2*i1-2*i2)*(2*j3-2*j2)))
	y1 := ((math.Pow(d1, 2) - math.Pow(d2, 2)) + (math.Pow(i2, 2) - math.Pow(i1, 2)) + (math.Pow(j2, 2) - math.Pow(j1, 2)) + x*(2*i1-2*i2)) / (2*j2 - 2*j1)

	log.Println(x1, y1)

	// final:
	binary.Write(c, binary.LittleEndian, uint8(0x45))
	binary.Write(c, binary.LittleEndian, float64(x1))
	binary.Write(c, binary.LittleEndian, float64(x))
	binary.Write(c, binary.LittleEndian, float64(y))
	binary.Write(c, binary.LittleEndian, float64(1))

	time.Sleep(100 * time.Millisecond)
	binary.Write(c, binary.LittleEndian, uint8(0xfe)) // attack
	binary.Write(c, binary.LittleEndian, uint64(0))

	time.Sleep(5000 * time.Millisecond)

	binary.Write(c, binary.LittleEndian, uint8(0x76))
	fmt.Fprintf(c, "\x0aFLAG_CONCH")

	binary.Write(c, binary.LittleEndian, uint8(0x76))
	fmt.Fprintf(c, "\x0aFLAG_CONCH")

	binary.Write(c, binary.LittleEndian, uint8(0x76))
	fmt.Fprintf(c, "\x0aFLAG_CONCH")

	time.Sleep(20 * time.Second)
}
